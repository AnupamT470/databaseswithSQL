//select whole coloumns'

SELECT * FROM shows;


SELECT retrieves data from a database.

* asterisk means all columns.
FROM keyword followed by the table name.
shows is the name of the table we are requesting data from.
; we end the statement with a semicolon.

// specific coloumns
SELECT column1, column2, column3
FROM table_name;


//unique values
DISTINCT is used to return just the unique values in a column, so no duplicates.
SELECT DISTINCT genre
FROM shows;


// Where
We can use the WHERE clause to filter for information based on a condition:
SELECT *
FROM shows
WHERE id = 23;

SELECT *
FROM shows
WHERE year > 2020;

///# Comparison Operators
Here are all the SQL comparison operators that we can use in a condition:

= equal to
!= not equal to
> greater than
< less than
>= greater than or equal to
<= less than or equal to
We use them to compare two values in the WHERE clause.



//# LIKE
The LIKE operator can be used to search for a pattern in a column. It’s used in the WHERE clause:

SELECT * 
FROM shows 
WHERE name LIKE 'T%'; 



The percentage sign % is a wildcard character that can be used with LIKE. You can use it to match characters to a pattern of your desired query.

The % can be used in different ways:

A% matches values that begin with letter 'A'.
%z matches values that end with 'z'.
We can also use % both before and after a pattern:

SELECT * 
FROM shows 
WHERE name LIKE '%the%'; 



//# BETWEEN
The BETWEEN operator is used in a WHERE clause to filter the result set within a certain range. The range must be separated by an AND keyword.

For example, this query filters the result to only include shows between the years 2020 and 2025 (inclusive):

SELECT *
FROM shows
WHERE year
BETWEEN 2020 AND 2025;

When the values are text, BETWEEN filters the result within the alphabetical range.

In this statement, BETWEEN filters the result to only include shows with names that begin with the letter 'A' up to 'D':

SELECT *
FROM shows
WHERE name
BETWEEN 'A' AND 'D';

Note: BETWEEN stops at the second letter, but doesn’t include values that begin with the second letter.

So if a show’s title is just 'D', it would be returned, whereas 'Dragon Ball Super' will not.


/// Order by

SELECT name, genre, stream, year
FROM shows
ORDER BY year;  // generally it is ordered in ascending


SELECT name, genre, stream, year
FROM shows
ORDER BY year DESC;

//in a relational database Primary keys uniquely identify rows within a table, and can be referenced in other tables with a foreign key. Together, they enable data consistency and retrieval.




